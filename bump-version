#!/usr/bin/env bash
set -e  # Exit immediately if any command fails

# Default version bump is patch unless specified (patch, minor, or major)
VERSION_TYPE=${1:-patch}


# -------- config / args --------
BUMP=${1:-patch}             # patch | minor | major
START=${START:-0.1.0}        # initial tag if none exists; override via env: START=0.2.0
PREFIX=${PREFIX:-v}          # tag prefix (keep 'v' for setuptools_scm defaults)

# -------- sanity checks --------
git rev-parse --is-inside-work-tree >/dev/null 2>&1 || {
  echo "Not a git repo." >&2; exit 1;
}

# Ensure we can see tags even in shallow clones
git fetch --tags --quiet || true

# Must have at least one commit to tag
if ! git log -1 >/dev/null 2>&1; then
  echo "No commits found. Commit something before tagging." >&2
  exit 1
fi

# -------- find latest semver tag with prefix --------
LATEST_TAG=""
set +e
LATEST_TAG=$(git describe --tags --abbrev=0 --match "${PREFIX}[0-9]*.[0-9]*.[0-9]*" 2>/dev/null)
set -e

if [[ -z "${LATEST_TAG}" ]]; then
  # No tag exists: seed initial tag
  SEED_TAG="${PREFIX}${START}"
  echo "No existing semver tag found. Seeding initial tag: ${SEED_TAG}"
  git tag "${SEED_TAG}" -m "Initial release ${SEED_TAG}"
  git push --tags
  echo "Seeded ${SEED_TAG}. Done."
  exit 0
fi

echo "Bumping version: $VERSION_TYPE"

# Bump the version using bump-my-version.
# This command should update version files, commit the changes, and create a Git tag.
uv run bump-my-version bump "$VERSION_TYPE" --verbose

# Push commits and tags to the remote repository.
echo "Pushing changes to remote repository..."
git push --follow-tags

# Retrieve the new version tag (latest tag)
NEW_TAG=$(git describe --tags --abbrev=0)
echo "New version tag: $NEW_TAG"

echo "Release process complete!"